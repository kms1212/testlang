%require "3.2"
%language "c++"
%locations

%code top {
#include <memory>
#include <iostream>
#include <string>
#include <vector>
}

%code requires {
#include "report.hpp"
#include "ast.hpp"

namespace yy {
    class Lexer;
}
}

%union {
    std::string* str;
    ast::ASTNode* node;
    ast::NodeList* nlist;
    std::vector<ast::Attribute*>* alist;
}

%parse-param { yy::Lexer& lexer }
%parse-param { ast::ASTNode** root }

%code{
#include "scanner.hpp"
#undef yylex
#define yylex lexer.yylex
}

%token<str> TOKEN_IDEN
%token<str> TOKEN_NUM_DEC
%token<str> TOKEN_NUM_HEX
%token<str> TOKEN_NUM_OCT
%token<str> TOKEN_NUM_BIN
%token<str> TOKEN_STRING
%token<str> TOKEN_RAWSTRING
%token<str> TOKEN_CHAR

%token TOKEN_DSTAR
%token TOKEN_PLUS_EQUAL
%token TOKEN_MINUS_EQUAL
%token TOKEN_STAR_EQUAL
%token TOKEN_SLASH_EQUAL
%token TOKEN_PERCENT_EQUAL
%token TOKEN_DSTAR_EQUAL
%token TOKEN_DLANGLEBRACKET
%token TOKEN_DRANGLEBRACKET
%token TOKEN_PIPE_EQUAL
%token TOKEN_AMPERSAND_EQUAL
%token TOKEN_TILDE_EQUAL
%token TOKEN_CARET_EQUAL
%token TOKEN_DLAB_EQUAL
%token TOKEN_DRAB_EQUAL
%token TOKEN_DEQUAL
%token TOKEN_TEQUAL
%token TOKEN_EMARK_DEQUAL
%token TOKEN_EMARK_EQUAL
%token TOKEN_LAB_EQUAL
%token TOKEN_RAB_EQUAL
%token TOKEN_DPIPE
%token TOKEN_DAMPERSAND

%token TOKEN_IMPORT

%token TOKEN_CLASS
%token TOKEN_STRUCT
%token TOKEN_ENUM
%token TOKEN_PROTOCOL
%token TOKEN_EXTENSION
%token TOKEN_MIXIN
%token TOKEN_IF
%token TOKEN_ELSE
%token TOKEN_WHILE
%token TOKEN_FOR
%token TOKEN_IN
%token TOKEN_WHERE
%token TOKEN_SWITCH
%token TOKEN_CASE
%token TOKEN_DEFAULT
%token TOKEN_RETURN
%token TOKEN_BREAK
%token TOKEN_CONTINUE

%type<node> external_expressions external_statements package_name
%type<node> expression postfix_expression identifier_expression unary_expression prefix_expression
%type<node> declaration class_declaration function_declaration variable_declaration mixin_declaration
%type<node> closure_item statement expression_statement
%type<nlist> translation_unit compound_declaration declaration_list parameter_declaration_list compound_statement closure_item_list argument_list
%type<alist> attribute_list

%start program
%%
program: translation_unit           { *root = $1; };

translation_unit
    : external_expressions                       { $$ = new ast::NodeList(); $$->add($1); }
    | translation_unit external_expressions      { $$->add($2); }
    ;

external_expressions
    : declaration             { $$ = $1; }
    | external_statements     { $$ = $1; }
    | expression              { $$ = new ast::DummyNode("exression"); } // tmp            
    ;


///////////////////////////////////////////////////////////////////////////////
// Source Configuration
///////////////////////////////////////////////////////////////////////////////

external_statements
    : TOKEN_IMPORT package_name ';'  { $$ = new ast::Import($2); }
    ;

package_name
    : TOKEN_IDEN                     { $$ = new ast::Identifier($1); }
    | TOKEN_IDEN '.' package_name    { $$ = new ast::ParentOf($3, new ast::Identifier($1));}
    ;


///////////////////////////////////////////////////////////////////////////////
// Declaration
///////////////////////////////////////////////////////////////////////////////

declaration
    : class_declaration     { $$ = $1; }
    | attribute_list class_declaration     { $$ = $2; $2->add_attributes($1); delete $1; }
    | struct_declaration    { $$ = new ast::DummyNode("struct_declaration"); }
    | attribute_list struct_declaration    { $$ = new ast::DummyNode("struct_declaration"); }
    | enum_declaration      { $$ = new ast::DummyNode("enum_declaration"); }
    | attribute_list enum_declaration      { $$ = new ast::DummyNode("enum_declaration"); }
    | protocol_declaration  { $$ = new ast::DummyNode("protocol_declaration"); }
    | attribute_list protocol_declaration  { $$ = new ast::DummyNode("protocol_declaration"); }
    | function_declaration  { $$ = $1; }
    | attribute_list function_declaration  { $$ = $2; $2->add_attributes($1); delete $1; }
    | variable_declaration  { $$ = $1; }
    | attribute_list variable_declaration  { $$ = $2; $2->add_attributes($1); delete $1; }
    | mixin_declaration     { $$ = $1; }
    | attribute_list mixin_declaration     { $$ = $2; $2->add_attributes($1); delete $1; }
    ;

class_declaration
    : TOKEN_CLASS TOKEN_IDEN compound_declaration                { $$ = new ast::ClassDecl($2, nullptr, $3); }
    | TOKEN_CLASS TOKEN_IDEN ':' TOKEN_IDEN compound_declaration { $$ = new ast::ClassDecl($2, new ast::Identifier($2), $5); }
    ;

struct_declaration
    : TOKEN_STRUCT TOKEN_IDEN compound_declaration
    | TOKEN_STRUCT TOKEN_IDEN ':' TOKEN_IDEN compound_declaration
    ;

enum_declaration
    : TOKEN_ENUM TOKEN_IDEN compound_declaration
    | TOKEN_ENUM TOKEN_IDEN ':' TOKEN_IDEN compound_declaration
    ;

protocol_declaration
    : TOKEN_PROTOCOL TOKEN_IDEN compound_declaration
    | TOKEN_PROTOCOL TOKEN_IDEN ':' TOKEN_IDEN compound_declaration
    ;

mixin_declaration
    : TOKEN_MIXIN TOKEN_IDEN compound_declaration                { $$ = new ast::MixinDecl($2, nullptr, $3); }
    | TOKEN_MIXIN TOKEN_IDEN ':' TOKEN_IDEN compound_declaration { $$ = new ast::MixinDecl($2, new ast::Identifier($2), $5); }
    ;

function_declaration
    : TOKEN_IDEN TOKEN_IDEN '(' ')' ';'                                           { $$ = new ast::FuncDecl($2, nullptr, nullptr); }
    | TOKEN_IDEN TOKEN_IDEN '(' parameter_declaration_list ')' ';'                { $$ = new ast::FuncDecl($2, $4, nullptr); }
    | TOKEN_IDEN TOKEN_IDEN '(' ')' compound_statement                            { $$ = new ast::FuncDecl($2, nullptr, $5); }
    | TOKEN_IDEN TOKEN_IDEN '(' parameter_declaration_list ')' compound_statement { $$ = new ast::FuncDecl($2, $4, $6); }
    ;

parameter_declaration_list
    : TOKEN_IDEN ':' TOKEN_IDEN                                 { $$ = new ast::NodeList("args"); $$->add(new ast::ParamDecl($3, $1)); }
    | parameter_declaration_list ',' TOKEN_IDEN ':' TOKEN_IDEN  { $$->add(new ast::ParamDecl($5, $3)); }
    ;

variable_declaration
    : TOKEN_IDEN TOKEN_IDEN ';'                         { $$ = new ast::VarDecl($2, new ast::Identifier($1)); }
    | TOKEN_IDEN TOKEN_IDEN '=' expression ';'          { $$ = new ast::VarDecl($2, new ast::Identifier($1), $4); }
    ;

compound_declaration
    : '{' '}'                  { $$ = new ast::NodeList(); }
    | '{' declaration_list '}' { $$ = $2; }
    ;

declaration_list
    : declaration                   { $$ = new ast::NodeList(); $$->add($1); }   
    | declaration_list declaration  { $$->add($2); }
    ;

attribute_list
    : '@' expression                 { $$ = new std::vector<ast::Attribute*>(); $$->push_back(new ast::Attribute($2)); }
    | attribute_list '@' expression  { $1->push_back(new ast::Attribute($3)); }
    ;

///////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////

expression
    : TOKEN_NUM_DEC { $$ = new ast::Literal($1, "int"); }
    | TOKEN_NUM_HEX { $$ = new ast::Literal($1, "int"); }
    | TOKEN_NUM_OCT { $$ = new ast::Literal($1, "int"); }
    | TOKEN_NUM_BIN { $$ = new ast::Literal($1, "int"); }
    | TOKEN_STRING   { $$ = new ast::Literal($1, "string"); }
    | TOKEN_RAWSTRING { $$ = new ast::Literal($1, "string"); }
    | TOKEN_CHAR        { $$ = new ast::Literal($1, "char"); }
    | '(' expression ')' { $$ = new ast::DummyNode(); }
    | unary_expression   { $$ = $1; }
    | binary_expression { $$ = new ast::DummyNode("binary_expression"); }
    | ternary_expression { $$ = new ast::DummyNode(); }
    | identifier_expression { $$ = $1; }
    ;

prefix_expression
    : '!' expression        { $$ = new ast::DummyNode(); }
    | '~' expression        { $$ = new ast::DummyNode(); }
    ;

postfix_expression
    : expression '[' expression ']'      { $$ = new ast::DummyNode(); }
    | expression '(' ')'                 { $$ = new ast::DummyNode(); }
    | expression '(' argument_list ')'   { $$ = new ast::FuncCall($1, $3); }
    | expression '.' expression          { $$ = new ast::ParentOf($3, $1); }

argument_list
    : TOKEN_IDEN ':' expression                       { $$ = new ast::NodeList("args"); $$->add(new ast::KeyValue($1, $3)); }
    | argument_list ',' TOKEN_IDEN ':' expression     { $$->add(new ast::KeyValue($3, $5));  }

unary_expression
    : prefix_expression                    { $$ = $1; }
    | postfix_expression                   { $$ = $1; }
    ;

binary_expression
    : arithmetic_expression
    | bitwise_expression
    | logical_expression
    | relational_expression
    | equality_expression
    | assignment_expression
    | complexed_assignment_expression
    ;

ternary_expression
    : expression '?' expression ':' expression
    ;

identifier_expression
    : TOKEN_IDEN              { $$ = new ast::Identifier($1); }
    | TOKEN_IDEN '?'          { $$ = new ast::Identifier($1); }
    | TOKEN_IDEN '!'          { $$ = new ast::Identifier($1); }
    | TOKEN_IDEN '[' ']'      { $$ = new ast::Identifier($1); }
    ;

arithmetic_expression
    : expression arithmetic_operator expression
    ;

arithmetic_operator: '+' | '-' | '*' | '/' | '%' | TOKEN_DSTAR;

bitwise_expression
    : expression bitwise_operator expression
    ;

bitwise_operator: TOKEN_DLANGLEBRACKET | TOKEN_DRANGLEBRACKET | '|' | '&' | '~' | '^';

logical_expression
    : expression logical_operator expression
    ;

logical_operator: TOKEN_DAMPERSAND | TOKEN_DPIPE;

relational_expression
    : expression relational_opeator expression
    ;

relational_opeator: '<' | '>' | TOKEN_LAB_EQUAL | TOKEN_RAB_EQUAL;

equality_expression
    : expression equality_operator expression
    ;

equality_operator: TOKEN_DEQUAL | TOKEN_EMARK_EQUAL;

assignment_expression
    : identifier_expression '=' expression
    | '(' expression_list ')' '=' expression
    ;

complexed_assignment_expression
    : identifier_expression complexed_assignment_operator expression
    | '(' expression_list ')' complexed_assignment_operator expression
    ;

complexed_assignment_operator: TOKEN_PLUS_EQUAL | TOKEN_MINUS_EQUAL | TOKEN_STAR_EQUAL 
                             | TOKEN_SLASH_EQUAL | TOKEN_PERCENT_EQUAL | TOKEN_DSTAR_EQUAL 
                             | TOKEN_PIPE_EQUAL | TOKEN_AMPERSAND_EQUAL | TOKEN_CARET_EQUAL;

expression_list
    : expression
    | expression ','
    | expression ',' expression_list
    ;


///////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////

statement
    : expression_statement               { $$ = $1; }
    | variable_declaration_statement     { $$ = new ast::DummyNode("Var decl stmt"); }
    | if_statement                       { $$ = new ast::DummyNode("If stmt"); }
    | while_statement                    { $$ = new ast::DummyNode("While stmt"); }
    | for_statement                      { $$ = new ast::DummyNode("For stmt"); }
    | switch_statement                   { $$ = new ast::DummyNode("Switch stmt"); }
    | jump_statement                     { $$ = new ast::DummyNode("Jump stmt"); }
    | compound_statement                 { $$ = new ast::DummyNode("Compound stmt"); }
    ;

expression_statement
    : expression ';'                     { $$ = $1; }
    ;

variable_declaration_statement
    : TOKEN_IDEN TOKEN_IDEN ';'
    | TOKEN_IDEN TOKEN_IDEN '=' expression ';'
    ;

if_statement
    : TOKEN_IF '(' expression ')' statement
    | TOKEN_IF '(' expression ')' statement TOKEN_ELSE statement
    ;

while_statement
    : TOKEN_WHILE '(' expression ')' statement
    ;

for_statement
    : TOKEN_FOR '(' expression_statement expression_statement expression ')' statement
    | TOKEN_FOR '(' TOKEN_IDEN TOKEN_IN expression ')' statement
    | TOKEN_FOR '(' TOKEN_IDEN TOKEN_IN expression ')' TOKEN_WHERE '(' expression ')' statement
    ;

switch_statement
    : TOKEN_SWITCH '(' expression ')' '{' '}'
    | TOKEN_SWITCH '(' expression ')' statement
    | TOKEN_CASE expression statement
    | TOKEN_DEFAULT statement
    ;

jump_statement
    : TOKEN_RETURN ';'
    | TOKEN_RETURN expression ';' 
    | TOKEN_BREAK ';'
    | TOKEN_CONTINUE ';'
    ;

compound_statement
    : '{' '}'                            { $$ = new ast::NodeList(); }
    | '{' closure_item_list '}'          { $$ = $2; }
    ;

closure_item_list
    : closure_item                       { $$ = new ast::NodeList(); $$->add($1); }
    | closure_item_list closure_item     { $$ = $1; $$->add($2); }
    ;

closure_item
    : variable_declaration               { $$ = $1; }
    | statement                          { $$ = $1; }
    ;
%%

void yy::parser::error(yy::location const& loc, std::string const& str) {
    report::error(loc, str);
}