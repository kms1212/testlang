%top{
#include <cstdio>
#include <cstring>
#include "parser.tab.hpp"
#include "location.hh"
#include "report.hpp"
%}

%option bison-cc bison-locations noyywrap unicode
%option namespace=yy lexer=Lexer lex=yylex

ANY_CHAR ([^\\\"]|\\.)
ANY_STR {ANY_CHAR}*
WHITESPACE [ \t\r\n]*
LETTER [a-zA-Z]
DIGIT_DEC [0-9]
DIGIT_HEX [0-9a-fA-F]
DIGIT_OCT [0-7]
DIGIT_BIN [01]
IDENTIFIER ({LETTER}|_)({LETTER}|{DIGIT_DEC}|_)*

%%
\/\/{ANY_STR}                  ;
"/*"(.|\n)*"*/"                ;

\"{ANY_STR}\"                  { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_STRING; }

`({ANY_CHAR}|\n)*`             { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_RAWSTRING; }

\'{ANY_CHAR}*\'                { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_CHAR; }

{DIGIT_DEC}{1,2}bit            { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_EXPL_BITSIZE; }

{DIGIT_DEC}+                   { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_NUM_DEC; }
0[xX]{DIGIT_HEX}+              { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_NUM_HEX; }
0[oO]{DIGIT_OCT}+              { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_NUM_OCT; }
0[bB]{DIGIT_BIN}+              { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_NUM_BIN; }

import                         return yy::parser::token::TOKEN_IMPORT;

class                          return yy::parser::token::TOKEN_CLASS;
struct                         return yy::parser::token::TOKEN_STRUCT;
enum                           return yy::parser::token::TOKEN_ENUM;
protocol                       return yy::parser::token::TOKEN_PROTOCOL;
extension                      return yy::parser::token::TOKEN_EXTENSION;
mixin                          return yy::parser::token::TOKEN_MIXIN;
if                             return yy::parser::token::TOKEN_IF;
else                           return yy::parser::token::TOKEN_ELSE;
while                          return yy::parser::token::TOKEN_WHILE;
for                            return yy::parser::token::TOKEN_FOR;
in                             return yy::parser::token::TOKEN_IN;
where                          return yy::parser::token::TOKEN_WHERE;
switch                         return yy::parser::token::TOKEN_SWITCH;
case                           return yy::parser::token::TOKEN_CASE;
default                        return yy::parser::token::TOKEN_DEFAULT;
return                         return yy::parser::token::TOKEN_RETURN;
break                          return yy::parser::token::TOKEN_BREAK;
continue                       return yy::parser::token::TOKEN_CONTINUE;
try                            return yy::parser::token::TOKEN_TRY;
catch                          return yy::parser::token::TOKEN_CATCH;
throw                          return yy::parser::token::TOKEN_THROW;
defer                          return yy::parser::token::TOKEN_DEFER;
async                          return yy::parser::token::TOKEN_ASYNC;
await                          return yy::parser::token::TOKEN_AWAIT;

_primitive_int                 return yy::parser::token::TOKEN_PRIMITIVE_INT;
_primitive_float               return yy::parser::token::TOKEN_PRIMITIVE_FLOAT;
_primitive_bool                return yy::parser::token::TOKEN_PRIMITIVE_BOOL;
_primitive_char                return yy::parser::token::TOKEN_PRIMITIVE_CHAR;

true                           return yy::parser::token::TOKEN_TRUE;
false                          return yy::parser::token::TOKEN_FALSE;

nil                            return yy::parser::token::TOKEN_NIL;

{IDENTIFIER}                   { std::string* s = new std::string(); *s = str(); yylval.str = s; return yy::parser::token::TOKEN_IDEN; }

"{"                            return '{';
"}"                            return '}';
"["                            return '[';
"]"                            return ']';
"("                            return '(';
")"                            return ')';
"="                            return '=';
"+"                            return '+';
"-"                            return '-';
"*"                            return '*';
"/"                            return '/';
"%"                            return '%';
"|"                            return '|';
"&"                            return '&';
"~"                            return '~';
"^"                            return '^';
"<"                            return '<';
">"                            return '>';
"?"                            return '?';
"!"                            return '!';
"."                            return '.';
","                            return ',';
":"                            return ':';
";"                            return ';';
"@"                            return '@';
"#"                            return '#';
\\                             return '\\';
"$"                            return '$';

"**"                           return yy::parser::token::TOKEN_DSTAR;
"+="                           return yy::parser::token::TOKEN_PLUS_EQUAL;
"-="                           return yy::parser::token::TOKEN_MINUS_EQUAL;
"*="                           return yy::parser::token::TOKEN_STAR_EQUAL;
"/="                           return yy::parser::token::TOKEN_SLASH_EQUAL;
"%="                           return yy::parser::token::TOKEN_PERCENT_EQUAL;
"**="                          return yy::parser::token::TOKEN_DSTAR_EQUAL;

"<<"                           return yy::parser::token::TOKEN_DLANGLEBRACKET;
">>"                           return yy::parser::token::TOKEN_DRANGLEBRACKET;

"|="                           return yy::parser::token::TOKEN_PIPE_EQUAL;
"&="                           return yy::parser::token::TOKEN_AMPERSAND_EQUAL;
"~="                           return yy::parser::token::TOKEN_TILDE_EQUAL;
"^="                           return yy::parser::token::TOKEN_CARET_EQUAL;
"<<="                          return yy::parser::token::TOKEN_DLAB_EQUAL;
">>="                          return yy::parser::token::TOKEN_DRAB_EQUAL;

"=="                           return yy::parser::token::TOKEN_DEQUAL;
"==="                          return yy::parser::token::TOKEN_TEQUAL;
"!=="                          return yy::parser::token::TOKEN_EMARK_DEQUAL;
"!="                           return yy::parser::token::TOKEN_EMARK_EQUAL;
"<="                           return yy::parser::token::TOKEN_LAB_EQUAL;
">="                           return yy::parser::token::TOKEN_RAB_EQUAL;

"||"                           return yy::parser::token::TOKEN_DPIPE;
"&&"                           return yy::parser::token::TOKEN_DAMPERSAND;

{WHITESPACE}                   ;

.                              { report::error(std::to_string(lineno()) + "l, " + std::to_string(columno()) + "c: " +
                                   "Unexpected character '" + std::string(text()) + "'"); };
%%
